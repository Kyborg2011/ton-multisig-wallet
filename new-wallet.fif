#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " @' $0 type ." <workchain-id> <n> <k> [<filename-base>] " cr
  ."Creates a new multi-signature wallet (at least k of n signatures are required for a transfer order to be processed by the multisig wallet) in specified workchain, with private keys saved to or loaded from files with names like this: <filename-base>1.pk, <filename-base>2.pk, ..., <filename-base><n>.pk" cr
  ."('new-wallet.pk' by default)" cr 1 halt
} : usage
$# 3 < ' usage if

$1 parse-workchain-id =: wc    // set workchain id from command line argument
$2 parse-int =: n   // set 'n' parameter of a multisig wallet from command line argument
$3 parse-int =: k   // set 'k' parameter of a multisig wallet from command line argument
def? $4 { @' $4 } { "new-wallet" } cond constant file-base

{ ."Value 'k' can't be lower then 0" cr 1 halt } : except1
{ ."Value 'k' can't be higher then value 'n'" cr 1 halt } : except2
{ ."Value 'n' can't be higher then 100" cr 1 halt } : except3

k 0< ' except1 if
k n > ' except2 if
n 100 > ' except3 if

."Creating new multi-signature wallet in workchain " wc . cr

// smart contract code in separate source file, generated by func compiler
PROGRAM{
    "smart-contract.fif" include
}END>c

// generate private and public keys
| box constant priv_keys
dictnew box constant pub_keys
0 box constant loop_index
{ @' loop_index 1+! file-base @' loop_index @ (.) $+ +".pk"
  load-generate-keypair @' priv_keys @ swap , @' priv_keys !
  <b swap B, @' loop_index @ 1- @' pub_keys @ 8 b>udict!
  swap pub_keys ! drop
  } n times

<b 0 32 u,  // seqno (initial value = 0)
    n 8 u, // 'n' variable of a multi-signature wallet
    k 8 u, // 'k' variable of a multi-signature wallet
    pub_keys @ dict, // ref to a dictionary with all public keys of a wallet
    dictnew dict, // ref to a dictionary with all pending orders of a wallet (by default is empty)
b> // data

null // no libraries
<b b{0011} s, 3 roll ref, rot ref, swap dict, b>  // create StateInit
dup ."StateInit: " <s csr. cr
dup hash wc swap 2dup 2constant wallet_addr
."new wallet address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr

// you have 600 seconds (10 minutes) to deploy a contract, because of 'valid_until' field, value is setted up to 'now + 600'.
<b 0 32 u, now 600 + 32 u, b>

// generate k signatures, using first k private keys
dup ."signing message: " <s csr. cr
dictnew box constant signatures
0 box constant loop_index2
{ dup hash @' priv_keys @ @' loop_index2 @ [] ed25519_sign_uint
  <b swap B, @' loop_index2 @ @' signatures @ 8 b>udict!
  swap signatures ! drop @' loop_index2 1+! } k times

// final initialization message
swap <b b{1000100} s, wallet_addr addr, b{000010} s, swap <s s, b{0} s, signatures @ dict, swap <s s, b>
dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved wallet creating query to file " type .")" cr
