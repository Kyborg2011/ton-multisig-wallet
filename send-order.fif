#!/usr/bin/env fift -s
"TonUtil.fif" include

{ ."usage: " @' $0 type ." <filename-base> <dest-addr> <seqno> <amount> <valid-until> <signatures-number> <pkid1> <pkid2> ... <pkidN>" cr
  ."Creates a request to multi-signature wallet created by new-wallet.fif, with <signatures-number> signatures, "
  ."generated using private keys, loaded from files like: <filename-base><pkid1>.pk, <filename-base><pkid2>.pk, ..., <filename-base><pkidN>.pk "
  ."and address from <filename-base>.addr, and saves it into wallet-query.boc" cr 1 halt
} : usage
$# 7 < ' usage if

true constant bounce

$1 =: file-base
$2 bounce parse-load-address =: bounce 2=: dest_addr
$3 parse-int =: seqno
$4 $>GR =: amount
$5 parse-int =: valid_until
$6 parse-int =: signatures_number
"wallet-query" constant savefile

// load needed private keys into tuple
| box constant priv_keys
0 box constant loop_index
{ 7 @' loop_index @ + $() parse-int file-base swap (.) $+ +".pk" load-generate-keypair
  @' priv_keys @ swap , @' priv_keys ! drop @' loop_index 1+! } signatures_number times

file-base +".addr" load-address
2dup 2constant wallet_addr
."Source wallet address = " 2dup .addr cr 6 .Addr cr

// constant test body comments of the order
<b "TEST" $, b> constant body-cell

."Transferring " amount .GR ."to account "
dest_addr 2dup bounce 7 + .Addr ." = " .addr
."seqno=0x" seqno x. ."bounce=" bounce . cr
."Body of transfer message is " body-cell <s csr. cr

// create a message
<b b{01} s, bounce 1 i, b{000100} s, dest_addr addr, amount Gram, 0 9 64 32 + + 1+ u,
  body-cell <s 2dup s-fits? not rot over 1 i, -rot { drop body-cell ref, } { s, } cond
b>
<b seqno 32 u, valid_until 32 u, 1 8 u, swap ref, b>

// create all needed signatures
dup ."signing message: " <s csr. cr
dictnew box constant signatures
0 box constant loop_index2
{ dup hash @' priv_keys @ @' loop_index2 @ [] ed25519_sign_uint
  <b swap B, 7 @' loop_index2 @ + $() parse-int 1- @' signatures @ 8 b>udict!
  swap signatures ! drop @' loop_index2 1+! } signatures_number times

<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s, signatures @ dict, swap <s s, b>
dup ."resulting external message: " <s csr. cr
2 boc+>B dup Bx. cr
savefile +".boc" tuck B>file
."(Saved to file " type .")" cr
